---
author: "JM"
date: "`r Sys.Date()`"
output:
  rmdformats::readthedown:
    highlight: tango
    theme: cerulean
css: custom.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

---
title: "Functions"
---

## Function documentation

Before even thinking of using an R function, you should clarify which arguments 
it expects. All the relevant details such as a description, usage, and arguments
can be found in the documentation. To consult the documentation on the sample() 
function, for example, you can use one of following R commands:

```{r eval=FALSE, echo=T}
help(sample)
?sample
```

If you execute these commands, you'll be redirected to www.rdocumentation.org.

A quick hack to see the arguments of the sample() function is the args() function.
Try it out in the console:

args(sample)
In the next exercises, you'll be learning how to use the mean() function with 
increasing complexity. The first thing you'll have to do is get acquainted with
the mean() function.


### Instructions

- Consult the documentation on the mean() function: ?mean or help(mean).
- Inspect the arguments of the mean() function using the args() function.

### Script

```{r eval=FALSE, echo=T}
# Consult the documentation on the mean() function

help(mean)

# Inspect the arguments of the mean() function

args(mean)
```

## Use a function

The documentation on the mean() function gives us quite some information:

- The mean() function computes the arithmetic mean.
- The most general method takes multiple arguments: x and ....
- The x argument should be a vector containing numeric, logical or time-related 
  information.
  
Remember that R can match arguments both by position and by name. Can you still 
remember the difference? You'll find out in this exercise!

Once more, you'll be working with the view counts of your social network profiles
for the past 7 days. These are stored in the linkedin and facebook vectors and 
have already been created for you.

### Instructions

- Calculate the average number of views for both linkedin and facebook and assign the         result to avg_li and avg_fb, respectively. Experiment with different types of argument     matching!
- Print out both avg_li and avg_fb.

### Script

```{r eval=FALSE, echo=T}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate average number of views

avg_li <- mean(linkedin)
avg_fb <- mean(facebook)

# Inspect avg_li and avg_fb

print(avg_li)
print(avg_fb)
```


## Use a function (2)
Check the documentation on the mean() function again:

```{r eval=FALSE, echo=T}
?mean
```

The Usage section of the documentation includes two versions of the mean() function.
The first usage,

```{r eval=FALSE, echo=T}
mean(x, ...)
```

Is the most general usage of the mean function. The 'Default S3 method', however, is:

```{r eval=FALSE, echo=T}
mean(x, trim = 0, na.rm = FALSE, ...)
```

The ... is called the ellipsis. It is a way for R to pass arguments along without 
the function having to name them explicitly. The ellipsis will be treated in more
detail in future courses.

For the remainder of this exercise, just work with the second usage of the mean 
function. Notice that both trim and na.rm have default values. This makes them 
optional arguments.

### Script

```{r eval=FALSE, echo=T}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate the mean of the sum

avg_sum <- mean(facebook + linkedin)

# Calculate the trimmed mean of the sum

avg_sum_trimmed <- mean(facebook + linkedin,  trim = 0.2)

# Inspect both new variables

print(avg_sum)
print(avg_sum_trimmed)
```

## Use a function (3)

In the video, Filip guided you through the example of specifying arguments of 
the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.

If you've had a good look at the documentation, you'll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. 
By default, it is set to FALSE, as the Usage of the default S3 method shows:

```{r eval=FALSE, echo=T}
mean(x, trim = 0, na.rm = FALSE, ...)
```


Let's see what happens if your vectors linkedin and facebook contain missing
values (NA).

### Instructions

Calculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.

Calculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.


```{r eval=FALSE, echo=T}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)

# Basic average of linkedin

mean(linkedin)

# Advanced average of linkedin

mean(linkedin, na.rm = T)
```

## Functions inside functions

You already know that R functions return objects that you can then use somewhere
else. This makes it easy to use functions inside functions, as you've seen before:

```{r eval=FALSE, echo=T}
speed <- 31
print(paste("Your speed is", speed))
```

Notice that both the print() and paste() functions use the ellipsis 
- ... - as an argument. Can you figure out how they're used?

### Instructions

Use abs() on linkedin - facebook to get the absolute differences between the daily LinkedIn and Facebook profile views. Place the call to abs() inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!

### Script 

```{r eval=FALSE, echo=T}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)

# Calculate the mean absolute deviation

mean(abs(linkedin - facebook), na.rm = T)
```


